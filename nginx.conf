events {
    worker_connections 1024;
}

http {
    # Configurações básicas
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    client_max_body_size 1m;

    # Logs
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;

    # Resolver DNS (importante para containers)
    resolver 127.0.0.11 valid=30s;

    # Upstream dinâmico para o app
    upstream dyndns_app {
        # Substitua pelo nome do serviço no Easypanel
        server dyndns-app:3000;
        keepalive 32;
    }

    # Servidor HTTP
    server {
        listen 80;
        server_name _;

        # Logs específicos
        access_log /var/log/nginx/dyndns_access.log;
        error_log /var/log/nginx/dyndns_error.log;

        # Headers básicos
        add_header X-Proxy "Nginx-DynDNS" always;

        # Proxy para aplicação Node.js
        location / {
            proxy_pass http://dyndns_app;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            proxy_pass_header Authorization;
            proxy_cache_bypass $http_upgrade;
            proxy_buffering off;

            # Timeouts apropriados
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Rota específica DynDNS com log detalhado
        location ~ ^/(nic|v3)/update {
            access_log /var/log/nginx/dyndns_updates.log;
            
            proxy_pass http://dyndns_app$request_uri;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            proxy_pass_header Authorization;
            proxy_buffering off;
        }
    }

    # Servidor HTTPS
    server {
        listen 443 ssl http2;
        server_name _;

        # Certificados SSL (serão criados no container)
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;

        # Configurações SSL compatíveis com câmeras antigas
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout 5m;

        # Mesmo proxy do HTTP
        location / {
            proxy_pass http://dyndns_app;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header Authorization $http_authorization;
            proxy_pass_header Authorization;
            proxy_buffering off;
        }
    }
}
